// def appIP = '0'
pipeline {
    agent any

    options {
        timestamps()
        // gitLabConnection('gitlabConnection')
    } //EO options

    triggers {
        gitlab(triggerOnPush:true, branchFilterType: 'All')
    } //EO trigers
    
    environment {
        image='grade-app'
        reponame='avshah/grade-app'
    }
    
  stages {
    stage('Checking commit msg'){
        steps {
            if (changelog '.*^\\[ci build\\] .+$' != 0) {currentBuild.result = 'NOT_BUILT'} 
        } //EO steps
      } //EO Checkout

    stage('Checkout and cleanup'){
        when {
            anyOf {
                branch "feature/*"
                branch "main"
            } //EO anyOf
        } //EO when
        steps {
           cleanWs()
           checkout scm
            //    cleanup
            sh "docker rm -f app mongodb"
        } //EO steps
      } //EO Checkout
        
    stage('build'){
        when {
            anyOf {
                branch "feature/*"
                branch "main"
            } //EO anyOf
        } //EO when
        steps {
            script{
                dir('Application'){
                sh "docker compose down"
                sh """docker build . -t '${image}'"""
                }// EO dir('Application')                      
            } //EO script
        } //EO steps
    } //EO Build

    stage('unit_testing'){
        when {
            anyOf {
                branch "feature/*"
                branch "main"
            } //EO anyOf
        } //EO when
        steps {
            script{
                dir('Application'){
                sh """
                docker compose up -d
                sleep 5
                bash unit_testing.sh
                """
                }// EO dir('Application')
            } //EO scrpit
        } //EO steps
    } //EO unit_testing

    stage('e2e_testing'){
        when {
            anyOf {
                branch "feature/*"
                branch "main"
            } //EO anyOf
        } //EO when
        steps {
            script{
                dir('Application'){
                sh """bash e2e_testing.sh"""
                }// EO dir('Application')
            } //EO script
        } //EO steps
    } //EO e2e_testing

    stage('Git_tag'){
        when {
            branch "main"
        } //EO when
        steps {
            script {
                sh """GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa" git fetch --tags git@github.com:HadadAvsha/Home-Project.git"""
                latestTag = sh (script: """git tag -l | sort -V | tail -n 1""", returnStdout: true).trim()
                if (latestTag == '') {nextTag='1.0.0'} 
                else {latestTag='0.0.0'
                    echo "latest tag is : ${latestTag}"
                    lastTagSplitted=latestTag.split('\\.')
                    major = lastTagSplitted[0]
                    minor = lastTagSplitted[1]
                    patch = lastTagSplitted[2].toInteger()
                    newPatch = patch + 1
                    nextTag = "${major}.${minor}.${newPatch}"
                    echo "Next tag is: ${nextTag}"
                } //EO else
                sh "git tag ${nextTag}"           
            } //EO script
        } //EO steps
    } //EO Git_tag

    stage('publish') {
    when {
        branch "main"    
    }
        steps {
            script{
                dir('Application'){
                               // configuring the dockerhub settings and deploying //
                withDockerRegistry(credentialsId: 'dockerHub') {
                    sh "docker tag ${image} ${reponame}:${nextTag}"
                    sh "docker push ${reponame}:${nextTag}"
                }//EO withDockerRegistry
                }// EO dir('Application')
            }//EO script
        } //EO steps
    } //EO publish

    stage('push git tag'){
        when {
            branch "main"
        } //EO when
        steps {
            script{
                sh """GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa" git push --tags git@github.com:HadadAvsha/Home-Project.git"""
            } //EO script
        } //EO steps
    } //push git tag
                    

    // stage('UpdateHelmTag') {
    // when {
    //     branch "main"    
    // }
    //     steps {
    //         script{
    //  //           dir('argocd'){
    //  //           checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'GithubCreds', url: 'git@github.com:HadadAvsha/Home-Project.git']]])
    //  //           sh "pwd"
    //             dir ("Gitops/Grade-app"){
    //                 sh "pwd"
    //                 def filename = 'values.yaml'
    //                 def data = readYaml file: filename
    //                 println(nextTag)
    //                 data.app.tag = "${nextTag}"
    //                 sh "rm $filename"
    //                 writeYaml file: filename, data: data
    //                 sh """
    //                     git checkout main
    //                     git add values.yaml
    //                     git commit -m "updated tag to ${nextTag}"
    //                     git push
    //                 """
    //             } //EO dir(Gitops/Grade-app)
    //  //           } //EO dir('argocd')
    //         } //EO script
    //     } //EO steps
    // } //EO UpdateHelmTag

  } //EO stages
//   post {
//     always {
//         script{
//         /* clean up our workspace */
//             sh "docker compose down"
//             cleanWs()
//             emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
//             recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
//             subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
//         } //EO script
//     } //EO always

//     // failure {
//     //     emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
//     //     recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
//     //     subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
//     // } //EO failure
//   } //EO post
} //EO pipeline